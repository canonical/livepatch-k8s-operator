name: Integration tests

on:
  pull_request:
  workflow_call:

jobs:
  integration-test:
    name: Integration tests (MicroK8s controller)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # To speed up the tests, we build the charm with Charmcraft and put the
      # `.charm` file in the repository root directory. Integration tests will
      # pick up this file and avoid building it per test case.
      - name: Install Charmcraft
        run: sudo snap install charmcraft --classic
      - name: Build charm
        run: charmcraft pack --platform ubuntu-20.04-amd64_ubuntu-22.04-amd64 --destructive-mode --verbosity=trace

      - name: Setup operator environment
        uses: charmed-kubernetes/actions-operator@main
        with:
          channel: 1.30-strict/stable
          juju-channel: 3.5/stable
          provider: microk8s
          microk8s-group: snap_microk8s
          microk8s-addons: "ingress storage dns rbac registry"
      # Instructions from https://microk8s.io/docs/registry-private
      # and https://github.com/containerd/cri/blob/master/docs/registry.md
      # Bash explanation https://stackoverflow.com/questions/15429330/how-to-specify-a-multi-line-shell-variable#comment21828145_15429426
      - name: Setup microk8s for private registry
        run: |
          read -r -d '' REGISTRY_CONFIG << EOL || true
            [plugins."io.containerd.grpc.v1.cri".registry.configs."ghcr.io".auth]
              username = "${{ github.actor }}"
              password = "${{ secrets.GITHUB_TOKEN }}"
          EOL
          echo "$REGISTRY_CONFIG" | sudo tee -a /var/snap/microk8s/current/args/containerd-template.toml
          sudo snap restart microk8s.daemon-containerd
      - name: Install tox
        run: python -m pip install tox
      - name: Run integration tests
        # set a predictable model name so it can be consumed by charm-logdump-action
        run: tox -e integration
      - name: Dump logs
        if: failure()
        uses: canonical/charming-actions/dump-logs@main
  integration-test-airgapped:
    name: Airgapped integration tests (LXD controller)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # To speed up the tests, we build the charm with Charmcraft and put the
      # `.charm` file in the repository root directory. Integration tests will
      # pick up this file and avoid building it per test case.
      - name: Install Charmcraft
        run: sudo snap install charmcraft --classic
      - name: Build charm
        run: charmcraft pack --platform ubuntu-20.04-amd64_ubuntu-22.04-amd64 --destructive-mode --verbosity=trace

      - name: Setup operator environment
        uses: charmed-kubernetes/actions-operator@main
        with:
          channel: 1.30-strict/stable
          juju-channel: 3.5/stable
          provider: microk8s
          microk8s-group: snap_microk8s
          microk8s-addons: "ingress storage dns rbac registry"
      # Instructions from https://microk8s.io/docs/registry-private
      # and https://github.com/containerd/cri/blob/master/docs/registry.md
      # Bash explanation https://stackoverflow.com/questions/15429330/how-to-specify-a-multi-line-shell-variable#comment21828145_15429426
      - name: Setup microk8s for private registry
        run: |
          read -r -d '' REGISTRY_CONFIG << EOL || true
            [plugins."io.containerd.grpc.v1.cri".registry.configs."ghcr.io".auth]
              username = "${{ github.actor }}"
              password = "${{ secrets.GITHUB_TOKEN }}"
          EOL
          echo "$REGISTRY_CONFIG" | sudo tee -a /var/snap/microk8s/current/args/containerd-template.toml
          sudo snap restart microk8s.daemon-containerd

      # LXD is needed for testing the integration with `pro-airgapped-server`
      # because there's no K8s version of this charm. We also need to add the
      # MicroK8s cloud to the LXD controller, so that Livepatch and
      # `pro-airgapped-server` models share the same controller and therefore
      # can be integrated with each other over a cross-model relation.
      - name: Install LXD
        uses: canonical/setup-lxd@v0.1.1
        with:
          channel: 6.1/stable
      - name: Bootstrap a controller on the LXD cloud
        run: |
          juju bootstrap localhost localhost-localhost
      # We need to change the MicroK8s API address from a localhost (127.0.0.1)
      # to a concrete IP address that is accessible by LXD containers/instances,
      # including the controller we have just bootstrapped. Note that the output
      # of the `microk8s.config` command is the content of the `client.config`
      # file with the API address changed as we need.
      - name: Tweak MicroK8s API address
        run: |
          sudo microk8s.config > /tmp/client.config
          sudo cp /tmp/client.config /var/snap/microk8s/current/credentials/client.config
      - name: Add MicroK8s cloud to LXD controller
        run: |
          /usr/bin/sudo -g snap_microk8s -E juju add-cloud microk8s --controller localhost-localhost --credential microk8s
      - name: Install tox
        run: python -m pip install tox
      - name: Run integration tests (airgapped)
        # set a predictable model name so it can be consumed by charm-logdump-action
        run: tox -e integration-airgapped
      - name: Dump logs
        if: failure()
        uses: canonical/charming-actions/dump-logs@main
